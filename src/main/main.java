package main;

import javacard.framework.*;
import pin.PINInterface;
import information.InformationInterface;
import javacardx.apdu.ExtendedLength;
import javacard.security.*;
import javacardx.crypto.*;

public class main extends Applet implements ExtendedLength{
	
	private static final byte[] pinAID = {(byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x01, (byte) 0x01};
	private static final byte[] inforAID = {(byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x02, (byte) 0x01};
	private static final byte[] cipherAID = {(byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x03, (byte) 0x01};
	
	private static final byte INS_VERIFY_PIN = (byte) 0x01;
    private static final byte INS_UPDATE_PIN = (byte) 0x02;
    private static final byte INS_RESET_PIN = (byte) 0x03;
    private static final byte INS_UNBLOCK_PIN = (byte) 0x04;
    private static final byte INS_ENTER = (byte) 0x05;
    private static final byte INS_PRINT = (byte) 0x07;
    private static final byte INS_CHANGE = (byte) 0x08;
    private static final byte INS_ADD_TICKET = (byte) 0x09;
    private static final byte INS_REMOVE_TICKET = (byte) 0x0A;
    private static final byte INS_ALL_TICKETS = (byte) 0x0B;
    private static final byte INS_BLOCK_PIN = (byte) 0x0C;
    private static final byte INS_RSA_AUTH = (byte) 0x0D;
    
    private static final short SW_VERIFICATION_FAILED = 0x7700;
    private static final short SW_PIN_BLOCKED = 0x7701;
    private static final short SW_PIN_VALIDATED = 0x7702;
    private static final short SW_PIN_NOT_VALIDATED = 0x7703;
    private static final short SW_INVALID_PIN_LENGTH = 0x7704;
    
	private static final short MAX_SIZE = (short) 32767;
	private static final short MAX_LENGTH_SEND = (short) 8190;
	private static final short MAX_LENGTH_COPY = (short) 506;
	
	private static final byte ID_ID_CARD = (byte) 0x70;
	private static final byte ID_NAME = (byte) 0x71;
	private static final byte ID_BIRTHDAY = (byte) 0x72;
	private static final byte ID_ADDRESS = (byte) 0x73;
	private static final byte ID_PHONE = (byte) 0x74;
	private static final byte ID_IMAGE = (byte) 0x75;
	
	private static final byte[] defaultPIN = new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06};

	private MessageDigest sha;
	private Cipher cipher;
	private short keyLen;
	private static short AES_KEY_LENGTH = (short) (KeyBuilder.LENGTH_AES_128 / 8);
	private byte[] hashValue;
	private Signature rsaSig;
	private AESKey aesKey;
	
	private static final short HASH_LENGTH = (short) 20;
	
	private main() {
		sha = MessageDigest.getInstance(MessageDigest.ALG_SHA, false);
		cipher = Cipher.getInstance(Cipher.ALG_AES_BLOCK_128_ECB_NOPAD, false);
		rsaSig = Signature.getInstance(Signature.ALG_RSA_SHA_PKCS1, false);
		aesKey = (AESKey) KeyBuilder.buildKey(KeyBuilder.TYPE_AES_TRANSIENT_RESET, KeyBuilder.LENGTH_AES_128, false);
	}

	
	public static void install(byte[] bArray, short bOffset, byte bLength) {
		new main().register(bArray, (short) (bOffset + 1), bArray[bOffset]);
	}

	public void process(APDU apdu){
		if (selectingApplet()){
			return;
		}

		byte[] buf = apdu.getBuffer();
		short recvLen = apdu.setIncomingAndReceive();
		switch (buf[ISO7816.OFFSET_INS]) {
			case INS_VERIFY_PIN:
				verifyPIN(apdu, buf);
				break;
			case INS_UPDATE_PIN:
				updatePIN(apdu, buf);
				break;
			case INS_RESET_PIN:
				resetPIN(apdu, buf);
				break;
			case INS_UNBLOCK_PIN:
				unblockPIN(apdu, buf);
				break;
			case INS_ENTER:
				saveInfor(apdu, buf, recvLen);
				break;
			case INS_PRINT:
				printInfor(apdu, buf);
				break;
			case INS_CHANGE:
				changeInfor(apdu, buf, recvLen);
				break;
			case INS_ADD_TICKET:
				addTicket(apdu, buf);
				break;
			case INS_REMOVE_TICKET:
				removeTicket(apdu, buf);
				break;
			case INS_ALL_TICKETS:
				getAllTickets(apdu, buf);
				break;
			case INS_BLOCK_PIN:
				blockPIN(apdu, buf);
				break;
			case INS_RSA_AUTH:	
				rsaAuth(apdu, buf);
				break;
			default:
				ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
		}
	}
	
	private void verifyPIN(APDU apdu, byte[] buf) {
		PINInterface sio = (PINInterface) getSIO(pinAID);      
		byte pinLength = buf[ISO7816.OFFSET_LC];
		
		if (pinLength != sio.getPINLength()) {
			ISOException.throwIt(SW_INVALID_PIN_LENGTH);
			return;
		}

		if (!sio.check(buf, ISO7816.OFFSET_CDATA, pinLength)) {
			short triesRemaining = sio.getTriesRemaining();
			if (triesRemaining == 0) {
				ISOException.throwIt(SW_PIN_BLOCKED);
			} else {
				buf[0] = (byte) triesRemaining;
				apdu.setOutgoingAndSend((short) 0, (short) 1);
				ISOException.throwIt(SW_VERIFICATION_FAILED);
			}
			return;
		}
		byte[] pin = new byte[pinLength];
		Util.arrayCopy(buf, ISO7816.OFFSET_CDATA, pin, (short) 0, pinLength);
		hashSHA(pin);
		ISOException.throwIt(SW_PIN_VALIDATED);
	}
	
	private void updatePIN(APDU apdu, byte[] buf) {
		PINInterface sio = (PINInterface) getSIO(pinAID);
        if (!sio.isValidated()) {
        	ISOException.throwIt(SW_PIN_NOT_VALIDATED);
            return;
        }
        byte pinLength = buf[ISO7816.OFFSET_LC];

        if (pinLength != sio.getPINLength()) {
        	ISOException.throwIt(SW_INVALID_PIN_LENGTH);
            return;
        }

        sio.update(buf, ISO7816.OFFSET_CDATA, pinLength);
        initAES(Cipher.MODE_DECRYPT);
        InformationInterface inforSIO = (InformationInterface) getSIO(inforAID);	
        byte[] cardId = decryptAES(inforSIO.getCardId());
		byte[] name = decryptAES(inforSIO.getName());
		byte[] birthday = decryptAES(inforSIO.getBirthday());
		byte[] address = decryptAES(inforSIO.getAddress());
		byte[] phoneNumber = decryptAES(inforSIO.getPhoneNumber());
		byte[] image = decryptAES(inforSIO.getImage());
		byte[] modulus = decryptAES(inforSIO.getModulus());
		byte[] exponent = decryptAES(inforSIO.getExponent());
		byte[] ticketIds = inforSIO.getTicketIds();
		short allTicketIdsLen = (short) ticketIds.length;
		if(allTicketIdsLen > (short) 1) {
			ticketIds = decryptAES(ticketIds);
		}
        byte[] pin = new byte[pinLength];
		Util.arrayCopy(buf, ISO7816.OFFSET_CDATA, pin, (short) 0, pinLength);
		hashSHA(pin);
		initAES(Cipher.MODE_ENCRYPT);
		inforSIO.updateCardId(encryptAES(cardId));
		inforSIO.updateName(encryptAES(name));
		inforSIO.updateBirthday(encryptAES(birthday));
		inforSIO.updateAddress(encryptAES(address));
		inforSIO.updatePhoneNumber(encryptAES(phoneNumber));
		inforSIO.updateImage(encryptImage(image));
		inforSIO.updateModulus(encryptAES(modulus));
		inforSIO.updateExponent(encryptAES(exponent));
		if(allTicketIdsLen > (short) 1) {
			inforSIO.updateTicketIds(encryptAES(ticketIds));
		}
        apdu.setOutgoingAndSend((short) 0, (short) 0);
    }
    

     private void resetPIN(APDU apdu, byte[] buf) {
     	PINInterface sio = (PINInterface) getSIO(pinAID);
        sio.reset();
        apdu.setOutgoingAndSend((short) 0, (short) 0); 
    }

    private void unblockPIN(APDU apdu, byte[] buf) {
		PINInterface sio = (PINInterface) getSIO(pinAID);
        sio.resetAndUnblock();
        apdu.setOutgoingAndSend((short) 0, (short) 0);
    }
    
    private void blockPIN(APDU apdu, byte[] buf) {
	    PINInterface sio = (PINInterface) getSIO(pinAID);
	    byte[] temp = new byte[] {0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E};
	    Util.arrayCopy(temp, (short) 0, buf, (short) 0, (short) 6);
	    for(short i = (short) 1; i < (short) 6; i++) {
		    sio.check(buf, (short) 0, (byte) 0x06);
	    }
	    apdu.setOutgoingAndSend((short) 0, (short) 0);
    }
    
    private void changeInfor(APDU apdu, byte[] buf, short recvLen) {
    	checkPinValidated();
	    InformationInterface sio = (InformationInterface) getSIO(inforAID);
	    initAES(Cipher.MODE_ENCRYPT);
	    short dataLen = apdu.getIncomingLength();
		if(dataLen > MAX_SIZE) {
			ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
		}
		short dataOffset = apdu.getOffsetCdata();
		byte[] temp = new byte[dataLen];
		short pointer = 0;
		while(recvLen > 0) {
			Util.arrayCopy(buf, dataOffset, temp, pointer, recvLen);
			pointer += recvLen;
			recvLen = apdu.receiveBytes(dataOffset);
		}
		short offset = 0;
		short len = 0;
		if(temp[offset] != ID_IMAGE) {
			for(short i = 0; i < dataLen; i++) {
				if(temp[i] == (byte) '.' || i == (short) (dataLen - 1)) {
					if(i == (short) (dataLen) - 1) {
						i++;
					}
					len = (short) (i - offset - 1);
					byte[] data = new byte[len];
					Util.arrayCopy(temp, (short) (offset + 1), data, (short) 0, len);
					switch(temp[offset]) {
						case ID_NAME:
							sio.updateName(encryptAES(data));
							break;
						case ID_BIRTHDAY:
							sio.updateBirthday(encryptAES(data));
							break;
						case ID_ADDRESS:
							sio.updateAddress(encryptAES(data));
							break;
						case ID_PHONE:
							sio.updatePhoneNumber(encryptAES(data));
							break;			
						default:
							ISOException.throwIt(ISO7816.SW_DATA_INVALID);
					}
					offset = (short) (i + 1);
					if(i < dataLen && temp[offset] == ID_IMAGE) {
						offset++;
						len = (short) (dataLen - offset);
						data = new byte[len];
						short destOff = (short) 0;
						while(len > 0) {
							short copyLen = len > MAX_LENGTH_COPY ? MAX_LENGTH_COPY : len;
							Util.arrayCopy(temp, offset, data, destOff, copyLen);
							offset += MAX_LENGTH_COPY;
							destOff += MAX_LENGTH_COPY;
							len -= MAX_LENGTH_COPY;
						}
						sio.updateImage(encryptImage(data));
						break;
					}
				}
			}	
		}else {
			offset++;
			len = (short) (dataLen - offset);
			byte[] data = new byte[len];
			short destOff = (short) 0;
			while(len > 0) {
				short copyLen = len > MAX_LENGTH_COPY ? MAX_LENGTH_COPY : len;
				Util.arrayCopy(temp, offset, data, destOff, copyLen);
				offset += MAX_LENGTH_COPY;
				destOff += MAX_LENGTH_COPY;
				len -= MAX_LENGTH_COPY;
			}
			sio.updateImage(encryptImage(data));
		}
    }
    
    private void printInfor(APDU apdu, byte[] buf) {
    	checkPinValidated();
    	initAES(Cipher.MODE_DECRYPT);
	    InformationInterface sio = (InformationInterface) getSIO(inforAID);	    
		short le = apdu.setOutgoing();
		short sendLen = (MAX_LENGTH_SEND > le) ? le: MAX_LENGTH_SEND;
		byte[] separate = new byte[] {(byte) 0x2E};
		byte p1 = buf[ISO7816.OFFSET_P1];
		apdu.setOutgoingLength(sendLen);
		if(p1 == (byte) 0x00) {
			byte[] cardId = sio.getCardId();
			byte[] name = sio.getName();
			byte[] birthday = sio.getBirthday();
			byte[] address = sio.getAddress();
			byte[] phoneNumber = sio.getPhoneNumber();
			byte[] image = sio.getImage();
			cardId = decryptAES(cardId);
			name = decryptAES(name);
			birthday = decryptAES(birthday);
			address = decryptAES(address);
			phoneNumber = decryptAES(phoneNumber);
			image = decryptAES(image);
			short cardIdLen = (short) cardId.length;
			short nameLen = (short) name.length;
			short birthdayLen = (short) birthday.length;
			short addressLen = (short) address.length;
			short phoneNumberLen = (short) phoneNumber.length;
			apdu.sendBytesLong(cardId, (short) (0), cardIdLen);
			apdu.sendBytesLong(separate, (short) 0, (short) 1);
			apdu.sendBytesLong(name, (short) (0), nameLen);
			apdu.sendBytesLong(separate, (short) 0, (short) 1);
			apdu.sendBytesLong(birthday, (short) (0), birthdayLen);
			apdu.sendBytesLong(separate, (short) 0, (short) 1);
			apdu.sendBytesLong(address, (short) 0, addressLen);
			apdu.sendBytesLong(separate, (short) 0, (short) 1);
			apdu.sendBytesLong(phoneNumber, (short) 0, phoneNumberLen);
			apdu.sendBytesLong(separate, (short) 0, (short) 1);
			short len = (short) image.length;
			byte[] send = new byte[2];
			send[0] = (byte) ((len >> 8) & 0xFF); 
			send[1] = (byte) (len & 0xFF);
			apdu.sendBytesLong(send, (short) 0, (short) 2);	
		}else {
			byte p2 = buf[ISO7816.OFFSET_P2];
			short offset = (short) (p2 * MAX_LENGTH_SEND);
			apdu.sendBytesLong(decryptAES(sio.getImage()), offset, sendLen);
		}
		
    }	
		
    private void saveInfor(APDU apdu, byte[] buf, short recvLen) {
	    InformationInterface sio = (InformationInterface) getSIO(inforAID);
	    hashSHA(defaultPIN);
	    initAES(Cipher.MODE_ENCRYPT);
	    short dataLen = apdu.getIncomingLength();
		if(dataLen > MAX_SIZE) {
			ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
		}
		short dataOffset = apdu.getOffsetCdata();
		byte[] temp = new byte[dataLen];
		short pointer = 0;
		short count = (short) 6;
		while(recvLen > 0) {
			Util.arrayCopy(buf, dataOffset, temp, pointer, recvLen);
			pointer += recvLen;
			recvLen = apdu.receiveBytes(dataOffset);
		}
		short offset = 0;
		short len = 0;
		for(short i = 0; i < dataLen; i++) {
			if(temp[i] == (byte) '.') {
				len = (short) (i - offset);
				byte[] data = new byte[len];
				Util.arrayCopy(temp, offset, data, (short) 0, len);
				switch(count) {
					case (short) 6: 
						sio.updateCardId(encryptAES(data));
						break;
					case (short) 5:
						sio.updateName(encryptAES(data));
						break;
					case (short) 4:
						sio.updateBirthday(encryptAES(data));
						break;
					case (short) 3:
						sio.updateAddress(encryptAES(data));
						break;
					case (short) 2:
						sio.updatePhoneNumber(encryptAES(data));
						break;			
					default:
						ISOException.throwIt(ISO7816.SW_DATA_INVALID);
				}
				count--;
				offset = (short) (i + 1);
				if(count == 1) {
					break;
				}
			}	
		}
		len = (short) (dataLen - offset);
		byte[] data = new byte[len];
		short destOff = (short) 0;
		while(len > 0) {
			short copyLen = len > MAX_LENGTH_COPY ? MAX_LENGTH_COPY : len;
			Util.arrayCopy(temp, offset, data, destOff, copyLen);
			offset += MAX_LENGTH_COPY;
			destOff += MAX_LENGTH_COPY;
			len -= MAX_LENGTH_COPY;
		}
		sio.updateImage(encryptImage(data));
		byte[] ticketIds = new byte[] {0x01};
		sio.updateTicketIds(ticketIds);
		generateRSAKey(sio, apdu, buf);
    }
    
    private void addTicket(APDU apdu, byte[] buf) {
    	checkPinValidated();
	    InformationInterface sio = (InformationInterface) getSIO(inforAID);
	    byte[] ticketIds = sio.getTicketIds();
	    short oneTicketIdLength = sio.getOneTicketIdLength();
	    short length = (short) ticketIds.length;
	    byte[] newTicketIds;
	    if(length > (short) 1) {
		    initAES(Cipher.MODE_DECRYPT);
		    ticketIds = decryptAES(ticketIds);
		    newTicketIds = new byte[(short) (ticketIds.length + oneTicketIdLength)];
			Util.arrayCopy(ticketIds, (short) 0, newTicketIds, (short) 0, (short) ticketIds.length);
			Util.arrayCopy(buf, ISO7816.OFFSET_CDATA, newTicketIds, (short) ticketIds.length, oneTicketIdLength);
	    }else {
		    newTicketIds = new byte[oneTicketIdLength];
		    Util.arrayCopy(buf, ISO7816.OFFSET_CDATA, newTicketIds, (short) 0, oneTicketIdLength);
	    }
	    initAES(Cipher.MODE_ENCRYPT);
	    sio.updateTicketIds(encryptAES(newTicketIds));
    }
    
    private void removeTicket(APDU apdu, byte[] buf) {
    	checkPinValidated();
	    initAES(Cipher.MODE_DECRYPT);
	    InformationInterface sio = (InformationInterface) getSIO(inforAID);
	    byte[] ticketIds = decryptAES(sio.getTicketIds());
	    short oneTicketIdLength = sio.getOneTicketIdLength();
	    byte[] newTicketIds = new byte[(short) (ticketIds.length - oneTicketIdLength)];
	    for(short i = (short) 0; i < (short) ticketIds.length; i += oneTicketIdLength) {
	    	if(ticketIds[i] == buf[ISO7816.OFFSET_CDATA]) {
	    		boolean equal = true;
		    	for(short j = (short) 1; j < oneTicketIdLength; j++) {
					if(ticketIds[(short) (i + j)] != buf[(short) (ISO7816.OFFSET_CDATA + j)]) {
						equal = false;
						break;
					}
				}
				if(equal) {
					Util.arrayCopy(ticketIds, (short) 0, newTicketIds, (short) 0, (short) (i));
					if((short) (i + 4) < (short) ticketIds.length) {
						Util.arrayCopy(ticketIds, (short) (i + 4), newTicketIds, i, (short) (ticketIds.length - 4 - i));
					}
					break;
				}
	    	}
	    }
	    initAES(Cipher.MODE_ENCRYPT);
	    if((short) newTicketIds.length > (short) 0) {
		    sio.updateTicketIds(encryptAES(newTicketIds));
	    }else {
		    newTicketIds = new byte[] {0x01};
		    sio.updateTicketIds(newTicketIds);
	    }
	    
    }
    
    private void getAllTickets(APDU apdu, byte[] buf) {
    	checkPinValidated();
	    initAES(Cipher.MODE_DECRYPT);
	    InformationInterface sio = (InformationInterface) getSIO(inforAID);
	    byte[] ticketIds = sio.getTicketIds();
	    short length = (short) ticketIds.length;
	    if(length > (short) 1) {
	    	ticketIds = decryptAES(ticketIds);
		    Util.arrayCopy(ticketIds, (short) 0, buf, (short) 0, (short) ticketIds.length);
			apdu.setOutgoingAndSend((short) 0, (short) ticketIds.length);
	    }
    }
    
    private void checkPinValidated() {
	    PINInterface pinSIO = (PINInterface) getSIO(pinAID);
		if(!pinSIO.isValidated()) {
			ISOException.throwIt(SW_PIN_NOT_VALIDATED);
		}
    }
    
    private void rsaAuth(APDU apdu, byte[] buf) {
	    InformationInterface sio = (InformationInterface) getSIO(inforAID);
	    initAES(Cipher.MODE_DECRYPT);
	    byte[] cardId = decryptAES(sio.getCardId());
	    byte[] name = decryptAES(sio.getName());
	    byte[] address = decryptAES(sio.getAddress());
	    byte[] modulus = decryptAES(sio.getModulus());
	    byte[] exponent = decryptAES(sio.getExponent());
	    RSAPrivateKey privateKey = (RSAPrivateKey) KeyBuilder.buildKey(KeyBuilder.TYPE_RSA_PRIVATE, KeyBuilder.LENGTH_RSA_1024, false);
	    privateKey.setModulus(modulus, (short) 0, (short) modulus.length);
	    privateKey.setExponent(exponent, (short) 0, (short) exponent.length);
	    rsaSig.init(privateKey, Signature.MODE_SIGN);
	    rsaSig.update(cardId, (short) 0, (short) cardId.length);
	    rsaSig.update(name, (short) 0, (short) name.length);
	    short len = rsaSig.sign(address, (short) 0, (short) address.length, buf, (short) 0);
	    apdu.setOutgoingAndSend((short) 0, len);
    }
    
    private void generateRSAKey(InformationInterface sio, APDU apdu, byte[] buf) {
	    KeyPair keyPair = new KeyPair(KeyPair.ALG_RSA,KeyBuilder.LENGTH_RSA_1024);
		keyPair.genKeyPair();
		RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();
		RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
		byte[] temp = new byte[(short) 256];
		short len = privateKey.getModulus(temp, (short) 0);
		byte[] modulus = new byte[len];
		Util.arrayCopy(temp, (short) 0, modulus, (short) 0, len);
		sio.updateModulus(encryptAES(modulus));
		len = privateKey.getExponent(temp, (short) 0);
		byte[] exponent = new byte[len];
		Util.arrayCopy(temp, (short) 0, exponent, (short) 0, len);
		sio.updateExponent(encryptAES(exponent));
		short modulusLen = publicKey.getModulus(buf, (short) 0);
		buf[modulusLen] = (byte) 0x2E;
		short exponentLen = publicKey.getExponent(buf, (short) (modulusLen + 1));
		apdu.setOutgoingAndSend((short) 0, (short) (modulusLen + 1 + exponentLen));
    }
    
    private byte[] encryptImage(byte[] in) {
	    short check = (short) (in.length / 16);
		short fullBlockSize = (short) (16 * check);
		if(fullBlockSize < (short) in.length) {
			check++;
		}
		byte[] temp = JCSystem.makeTransientByteArray((short) 16, JCSystem.CLEAR_ON_DESELECT);
		byte[] data = new byte[(short) (check * 16)];
		short i;
		for( i = (short) 0; i < (short) (check - 1); i++) {
			Util.arrayCopy(in, (short) (i * 16), temp, (short) 0, (short) 16);
			Util.arrayCopy(encryptAES(temp), (short) 0, data, (short) (i * 16), (short) 16);
		}
		temp = JCSystem.makeTransientByteArray((short) (in.length - i * 16), JCSystem.CLEAR_ON_DESELECT);
		Util.arrayCopy(in, (short) (i * 16), temp, (short) 0, (short) (in.length - i * 16));
		Util.arrayCopy(encryptAES(temp), (short) 0, data, (short) (i * 16), (short) 16);
		return data;
    }
    
    private byte[] encryptAES(byte[] in) {
		byte[] paddedIn = paddingPKCS(in);
		short length = (short) paddedIn.length;
		byte[] out = new byte[length];
		cipher.doFinal(paddedIn, (short) 0, (short) paddedIn.length, out, (short) 0);
		return out;
	}
	
	private byte[] decryptAES(byte[] in) {
		short length = (short) in.length;
		byte[] out = new byte[length];
		cipher.doFinal(in, (short) 0, (short) length, out, (short) 0);
		byte[] removedPaddingOut = removePaddingPKCS(out);
		return removedPaddingOut;
	} 
     
    private byte[] paddingPKCS(byte[] in) {
		short check = (short) (in.length / 16);
		short fullBlockSize = (short) (16 * check);
		short lastBlockSize = (short) (in.length - fullBlockSize);
		byte padValue = (byte) (16 - lastBlockSize);
		if(padValue != (byte) 0x00 && padValue != (byte) 0x10) {
			byte[] out = JCSystem.makeTransientByteArray((short) (fullBlockSize + 16), JCSystem.CLEAR_ON_DESELECT);
			Util.arrayCopy(in, (short) 0, out, (short) 0, (short) in.length);
			for(short i = (short) (fullBlockSize + lastBlockSize); i < out.length; i = (short) (i + 1)) {
				out[i] = padValue;
			}
			return out;
		}
		return in;
	}
	
	private byte[] removePaddingPKCS(byte[] in) {
		byte lastByte = in[(short) (in.length - 1)];
		if(lastByte < (byte) 0x01 || lastByte > (byte) 0x0F) {
			return in; 
		}
		
		for(short i = (short) (in.length - 2); i > (short) (in.length - lastByte); i--) {
			if(in[i] != lastByte) {
				return in;
			}
		}
		
		byte[] out = JCSystem.makeTransientByteArray((short)(in.length - lastByte), JCSystem.CLEAR_ON_DESELECT);
		Util.arrayCopy(in, (short) 0, out, (short) 0, (short) out.length);
		return out;
	}
    
    private void initAES(byte mode) {
	    byte[] key = new byte[AES_KEY_LENGTH];
		Util.arrayCopy(hashValue, (short) 0, key, (short) 0, AES_KEY_LENGTH);
		aesKey.setKey(key, (short) 0);
		cipher.init(aesKey, mode);
    }
    
    private void hashSHA(byte[] in) {
	    hashValue = new byte[HASH_LENGTH];
	    sha.doFinal(in, (short) 0, (short) in.length, hashValue, (short) 0);
    }
    
    private Shareable getSIO(byte[] appletID) {
	    AID aid = JCSystem.lookupAID( appletID, (short)0, (byte) appletID.length);
	    Shareable shareable = JCSystem.getAppletShareableInterfaceObject(aid, (byte)0x00);
	    if (shareable == null) {
            ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);
		} 
	    return shareable;
    }	
	
	private void sendResponse(APDU apdu, byte[] buf, short status) {
        Util.setShort(buf, (short) 0, status); 
        apdu.setOutgoingAndSend((short) 0, (short) 2);
    }

}

// select
// /select 11223344550401
// nhap
// /send 000500000B012E012E012E012E012E01
// /send
// lay ra so luong data can tra ve
// /send 00060000
// in
// it du lieu
// /send 000701000B
// nhieu du lieu
// /send 00070100001FFE
// 
// sa
// /send 000800000E71022E72022E73022E74022E7502

// /select 777777777777

// verify /send 00010000 05 010203040506

// update  /send 00020000 05 010203040506

// reset   /send 00030000
// reset block   /send 00040000